import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.core.*
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.drawscope.drawCircle
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.delay

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            EyeMovementApp()
        }
    }
}

@Composable
fun EyeMovementApp() {
    var eyeOffsetX by remember { mutableStateOf(0f) }
    var eyeOffsetY by remember { mutableStateOf(0f) }
    var leftPupilSize by remember { mutableStateOf(20f) }
    var rightPupilSize by remember { mutableStateOf(20f) }

    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.SpaceAround,
        modifier = Modifier.fillMaxSize().background(Color(0xFFEDEDED))
    ) {
        Spacer(modifier = Modifier.height(16.dp))

        Row(horizontalArrangement = Arrangement.Center, modifier = Modifier.fillMaxWidth()) {
            Eye(eyeOffsetX, eyeOffsetY, leftPupilSize)
            Spacer(modifier = Modifier.width(40.dp))
            Eye(eyeOffsetX, eyeOffsetY, rightPupilSize)
        }

        DirectionControls(
            onDirectionClick = { dx, dy ->
                eyeOffsetX = dx
                eyeOffsetY = dy
            }
        )

        TorchControls(onTorchClick = { eye ->
            if (eye == "left") {
                leftPupilSize = 8f
                rightPupilSize = 8f
            } else {
                rightPupilSize = 8f
                leftPupilSize = 8f
            }
            LaunchedEffect(Unit) {
                delay(1000)
                leftPupilSize = 20f
                rightPupilSize = 20f
            }
        })
    }
}

@Composable
fun Eye(offsetX: Float, offsetY: Float, pupilSize: Float) {
    Box(
        modifier = Modifier
            .size(100.dp)
            .background(Color.White, CircleShape)
            .padding(10.dp),
        contentAlignment = Alignment.Center
    ) {
        Canvas(modifier = Modifier.size(100.dp)) {
            drawCircle(
                color = Color.Black,
                radius = pupilSize,
                center = center.copy(x = center.x + offsetX, y = center.y + offsetY)
            )
        }
    }
}

@Composable
fun DirectionControls(onDirectionClick: (Float, Float) -> Unit) {
    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        ControlButton("↑") { onDirectionClick(0f, -15f) }
        Row {
            ControlButton("←") { onDirectionClick(-15f, 0f) }
            Spacer(modifier = Modifier.width(40.dp))
            ControlButton("→") { onDirectionClick(15f, 0f) }
        }
        ControlButton("↓") { onDirectionClick(0f, 15f) }
    }
}

@Composable
fun ControlButton(label: String, onClick: () -> Unit) {
    Box(
        modifier = Modifier
            .size(50.dp)
            .clip(CircleShape)
            .background(Color.Red)
            .clickable { onClick() }
            .padding(12.dp),
        contentAlignment = Alignment.Center
    ) {
        Text(label, color = Color.White)
    }
    Spacer(modifier = Modifier.height(8.dp))
}

@Composable
fun TorchControls(onTorchClick: (String) -> Unit) {
    Row(horizontalArrangement = Arrangement.SpaceEvenly, modifier = Modifier.fillMaxWidth().padding(16.dp)) {
        Button(onClick = { onTorchClick("left") }) {
            Text("Torch Left Eye")
        }
        Button(onClick = { onTorchClick("right") }) {
            Text("Torch Right Eye")
        }
    }
}
